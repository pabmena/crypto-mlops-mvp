services:
  # === EXISTING SERVICES ===
  api:
    build: ./api
    ports:
      - "8800:8800"
    volumes:
      - ./data:/app/data
      - ./ml:/app/ml
    environment:
      - PYTHONPATH=/app
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
    depends_on:
      - postgres
      - mlflow
      - minio
    networks:
      mlops-network:

  # === DATABASE ===
  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: mlops
      POSTGRES_USER: mlops
      POSTGRES_PASSWORD: mlops123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      mlops-network:

  # === MLFLOW ===
  mlflow:
    build: ./ml/mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlops:mlops123@postgres:5432/mlflow
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin123
    depends_on:
      - postgres
      - minio
    restart: unless-stopped
    networks:
      mlops-network:

  # === MINIO (S3 Compatible) ===
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      mlops-network:

  # === AIRFLOW ===
  airflow-init:
    build: ./airflow
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://mlops:mlops123@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=YlCImzjge_TeZc5FVOyxN1yMM5JziWNF3gULEUqXMaU=
      - AIRFLOW__WEBSERVER__SECRET_KEY=YlCImzjge_TeZc5FVOyxN1yMM5JziWNF3gULEUqXMaU=
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./ml:/opt/airflow/ml
    depends_on:
      - postgres
    networks:
      mlops-network:
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --firstname Admin --lastname Admin --role Admin --email admin@airflow.com --password admin123
      "

  airflow-webserver:
    build: ./airflow
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://mlops:mlops123@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=YlCImzjge_TeZc5FVOyxN1yMM5JziWNF3gULEUqXMaU=
      - AIRFLOW__WEBSERVER__SECRET_KEY=YlCImzjge_TeZc5FVOyxN1yMM5JziWNF3gULEUqXMaU=
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./ml:/opt/airflow/ml
    depends_on:
      - airflow-init
      - postgres
    networks:
      mlops-network:
    command: airflow webserver

  airflow-scheduler:
    build: ./airflow
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://mlops:mlops123@postgres:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=YlCImzjge_TeZc5FVOyxN1yMM5JziWNF3gULEUqXMaU=
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./ml:/opt/airflow/ml
    depends_on:
      - airflow-init
      - postgres
    networks:
      mlops-network:
    command: airflow scheduler

  # === KAFKA ECOSYSTEM ===
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      mlops-network:

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      mlops-network:

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8088:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    depends_on:
      - kafka
    networks:
      mlops-network:

  # === GRPC SERVER ===
  grpc-server:
    build: ./grpc
    ports:
      - "50051:50051"
    environment:
      - API_ENDPOINT=http://api:8800
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      - api
      - mlflow
    networks:
      mlops-network:

  # === GRAPHQL SERVER ===
  graphql-server:
    build: ./graphql
    ports:
      - "4000:4000"
    environment:
      - API_ENDPOINT=http://api:8800
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      - api
      - mlflow
    networks:
      mlops-network:

  # === STREAMING SERVICES ===
  crypto-producer:
    build: ./streaming/producer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=crypto-prices
    depends_on:
      - kafka
    networks:
      mlops-network:
    restart: unless-stopped

  crypto-consumer:
    build: ./streaming/consumer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=crypto-prices
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      - kafka
      - mlflow
    networks:
      mlops-network:
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:

networks:
  mlops-network:
    driver: bridge